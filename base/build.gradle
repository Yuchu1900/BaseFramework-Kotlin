apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29



    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled true
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.2.0-alpha02'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'


    api 'io.reactivex.rxjava2:rxandroid:2.1.1'
    api 'io.reactivex.rxjava2:rxjava:2.2.17'
    api 'com.trello.rxlifecycle2:rxlifecycle:2.2.1'
    api 'com.trello.rxlifecycle2:rxlifecycle-android:2.2.1'
    api 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.1'

    //RecyclerView
    api 'androidx.recyclerview:recyclerview:1.1.0'

    api 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'

    //FasterAdapter
    api 'com.mikepenz:fastadapter:4.1.2'
    api "com.mikepenz:fastadapter-extensions-diff:4.1.2" // diff util helpers
    api "com.mikepenz:fastadapter-extensions-drag:4.1.2" // drag support
    api "com.mikepenz:fastadapter-extensions-paged:4.1.2" // paging support
    api "com.mikepenz:fastadapter-extensions-scroll:4.1.2" // scroll helpers
    api "com.mikepenz:fastadapter-extensions-swipe:4.1.2" // swipe support
    api "com.mikepenz:fastadapter-extensions-ui:4.1.2" // pre-defined ui components
    api "com.mikepenz:fastadapter-extensions-utils:4.1.2" // needs the `expandable`, `drag` and `scroll` extension.
    api "com.google.android.material:material:1.1.0"
//    api 'com.mikepenz:fastadapter-extensions:2.6.3@aar'
//    api 'com.mikepenz:fastadapter-commons:2.6.3@aar'
//    api 'com.mikepenz:materialize:1.1.2@aar'

    api 'com.github.Kennyc1012:MultiStateView:2.1.1'//记得在项目的build.gradle中配置特殊的maven路径
    api 'com.flyco.systembar:FlycoSystemBar_Lib:1.0.0@aar'
    api 'pub.devrel:easypermissions:1.2.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //kotlin注解DataBinding, 否则BR这种资源无法自动生成
    kapt'com.android.databinding:compiler:3.1.4'
}
repositories {
    mavenCentral()
}

//怎么将自己的库提供给别人用呢(像引入第三方库那样，只要在build.gradle文件里implementation 'xxx')
//1.要打包的模块的build.gradle文件里，写入下面的"打包发布配置"
//2.然后在Android Studio的终端Terminal里输入：./gradlew uploadArchives 来创建模块对应的.jar和.aar文件
//  这些文件存放的位置由下面配置里的参数"GITHUB_REPO_PATH"指定
//3.创建了这些文件后，要同步到对应的git仓库
//这样就可以像导入第三方库一样，导入我们直接的库，具体要怎么导入呢？
//1.在工程目录的build.gradle文件里配置maven地址
//  (1)buildscript的repositories下加入mavenCentral()
//  (2)allprojects的repositories下加入maven { url "https://raw.githubusercontent.com/Yuchu1900/BaseFramework-Kotlin/master" }
//     url的格式是：https://raw.githubusercontent.com/GitHub用户名/仓库项目名/master
//     除了"GitHub用户名"和"仓库项目名"改为对应的值，其他内容不变
//2.在要使用的模块里(比如本工程的app模块要使用这些功能)，就在该模块的build.gradle文件里配置implementation 'xxx'
//  例如：implementation 'com.cmh:base_framework_lib:1.0.0'
//  具体格式：implementation 'PUBLISH_GROUP_ID:PUBLISH_ARTIFACT_ID:PUBLISH_VERSION'

//////// 打包发布配置开始 ////////
apply plugin: 'maven'
ext {
    // 从Github上clone下来的项目的本地地址
    GITHUB_REPO_PATH = "/Users/chenminghui/Documents/Project/SourceTree/BaseFramework"//这里指定的就是刚刚新建项目后clone下来的在本地的路径
    PUBLISH_GROUP_ID = 'com.cmh'
    PUBLISH_ARTIFACT_ID = 'base_framework_lib'
    PUBLISH_VERSION = '1.0.0'
}
uploadArchives {
    repositories.mavenDeployer {
        def deployPath = file(project.GITHUB_REPO_PATH)
        repository(url: "file://${deployPath.absolutePath}")
        pom.project {
            groupId project.PUBLISH_GROUP_ID
            artifactId project.PUBLISH_ARTIFACT_ID
            version project.PUBLISH_VERSION
        }
    }
}
// 源代码一起打包
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
//    archiveClassifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}
artifacts {
    archives androidSourcesJar
}
//////// 打包发布配置结束 ////////